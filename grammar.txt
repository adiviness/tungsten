
start : block $

block : statements

statments : statement statements
    |

statement : declaration NEWLINE
    | NEWLINE
    | if
    | while
    | function_call NEWLINE
    | function_define NEWLINE
    | RETURN expression

declaration : IDENTIFIER IDENTIFIER ASSIGN expression
    | IDENTIFIER ASSIGN expression

if : IF expression COLON NEWLINE INDENT block DEDENT elif
    | IF expression COLON NEWLINE INDENT block DEDENT elif ELSE INDENT block DEDENT

elif : ELIF expression COLON NEWLINE INDENT block DEDENT elif
    |

while : WHILE expression COLON NEWLINE INDENT block DEDENT
    
expression : val
    | val binary_op expression
    | unary_op val
    | unary_op val binary_op expression
    | function_call
    | unary_op function_call
    | function_call binary_op expression

function_call : IDENTIFIER L_PAREN R_PAREN
    | IDENTIFIER L_PAREN arg_list R_PAREN

arg_list : val
    | val COMMA arg_list

function_define : DEF IDENTIFIER L_PAREN R_PAREN IDENTIFIER COLON NEWLINE INDENT block DEDENT
    | DEF IDENTIFIER L_PAREN param_list R_PAREN IDENTIFIER COLON NEWLINE INDENT block DEDENT


param_list : IDENTIFIER IDENTIFIER
    | IDENTIFIER IDENTIFIER COMMA param_list


binary_op : PLUS
    | MINUS
    | MULTIPLY
    | DIVIDE
    | OR
    | AND
    | EQUAL
    | NOT_EQUAL
    | LESS_THAN
    | LESS_THAN_EQUAL
    | GREATER_THAN
    | GREATER_THAN_EQUAL
   

unary_op : MINUS
    | NOT

val : INTEGER
    | FLOAT
    | TRUE
    | FALSE
    | STRING
    | IDENTIFIER
